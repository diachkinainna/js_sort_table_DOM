{"mappings":"ACGA,IAAM,EAAY,SAAS,aAAa,CAAC,SACnC,EAAY,SAAS,aAAa,CAAC,SAEzC,EAAU,gBAAgB,CAAC,QAAS,SAAC,CAArC,EACE,IAAM,EAAa,EAAE,MAAM,CAAC,OAAO,CAAC,MAC9B,EAAO,EAAU,IAAI,CACrB,EAAS,EAAE,CAEZ,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAO,IAAI,CAAC,CACV,KAAM,EAAI,KAAK,CAAC,EAAE,CAAC,WAAW,CAC9B,SAAU,EAAI,KAAK,CAAC,EAAE,CAAC,WAAW,CAClC,IAAK,EAAI,KAAK,CAAC,EAAE,CAAC,WAAW,CAC7B,OAAQ,EAAI,KAAK,CAAC,EAAE,CAAC,WAAW,AAClC,E,C,C,M,E,CANG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CASL,IAAM,EAAa,EAAW,WAAW,CAAC,IAAI,GAE9C,EAAO,IAAI,CAAC,SAAC,CAAA,CAAS,CAAtB,QACE,AAAI,AAAe,SAAf,GAAyB,AAAe,aAAf,EACpB,CAAO,CAAC,EAAW,CAAC,aAAa,CAAC,CAAO,CAAC,EAAW,EAG1D,AAA2B,QAA3B,EAAW,WAAW,CACjB,SAAS,CAAO,CAAC,EAAW,EAAI,SAAS,CAAO,CAAC,EAAW,EAGjE,AAAe,WAAf,EAIK,AAHS,SAAS,CAAO,CAAC,EAAW,CAAC,OAAO,CAAC,UAAW,IAAK,IACrD,SAAS,CAAO,CAAC,EAAW,CAAC,OAAO,CAAC,UAAW,IAAK,UAIzE,GAEA,EAAU,SAAS,CAAG,GAEjB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAwB,CAAxB,IAAM,EAAN,EAAA,KAAA,CACG,EAAM,SAAS,aAAa,CAAC,KAEnC,CAAA,EAAI,SAAS,CAAG,eAER,MAAA,CADA,EAAO,IAAI,CAAC,qBAEZ,MAAA,CADA,EAAO,QAAQ,CAAC,qBAEhB,MAAA,CADA,EAAO,GAAG,CAAC,qBACG,MAAA,CAAd,EAAO,MAAM,CAAC,eAGtB,EAAU,WAAW,CAAC,EACxB,C,C,M,E,CAXK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAYP","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-unused-expressions */ \"use strict\";\nvar tableHead = document.querySelector(\"thead\");\nvar tableBody = document.querySelector(\"tbody\");\ntableHead.addEventListener(\"click\", function(e) {\n    var columnName = e.target.closest(\"th\");\n    var rows = tableBody.rows;\n    var people = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            people.push({\n                Name: row.cells[0].textContent,\n                Position: row.cells[1].textContent,\n                Age: row.cells[2].textContent,\n                Salary: row.cells[3].textContent\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var sortedName = columnName.textContent.trim();\n    people.sort(function(person1, person2) {\n        if (sortedName === \"Name\" || sortedName === \"Position\") return person1[sortedName].localeCompare(person2[sortedName]);\n        if (columnName.textContent === \"Age\") return parseInt(person1[sortedName]) - parseInt(person2[sortedName]);\n        if (sortedName === \"Salary\") {\n            var salary1 = parseInt(person1[sortedName].replace(/[^0-9]/g, \"\"), 10);\n            var salary2 = parseInt(person2[sortedName].replace(/[^0-9]/g, \"\"), 10);\n            return salary1 - salary2;\n        }\n    });\n    tableBody.innerHTML = \"\";\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = people[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var person = _step1.value;\n            var row1 = document.createElement(\"tr\");\n            row1.innerHTML = \"\\n      <td>\".concat(person.Name, \"</td>\\n      <td>\").concat(person.Position, \"</td>\\n      <td>\").concat(person.Age, \"</td>\\n      <td>\").concat(person.Salary, \"</td>\\n    \");\n            tableBody.appendChild(row1);\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n});\n\n//# sourceMappingURL=index.cd5b203a.js.map\n","/* eslint-disable no-unused-expressions */\n'use strict';\n\nconst tableHead = document.querySelector('thead');\nconst tableBody = document.querySelector('tbody');\n\ntableHead.addEventListener('click', (e) => {\n  const columnName = e.target.closest('th');\n  const rows = tableBody.rows;\n  const people = [];\n\n  for (const row of rows) {\n    people.push({\n      Name: row.cells[0].textContent,\n      Position: row.cells[1].textContent,\n      Age: row.cells[2].textContent,\n      Salary: row.cells[3].textContent,\n    });\n  }\n\n  const sortedName = columnName.textContent.trim();\n\n  people.sort((person1, person2) => {\n    if (sortedName === 'Name' || sortedName === 'Position') {\n      return person1[sortedName].localeCompare(person2[sortedName]);\n    }\n\n    if (columnName.textContent === 'Age') {\n      return parseInt(person1[sortedName]) - parseInt(person2[sortedName]);\n    }\n\n    if (sortedName === 'Salary') {\n      const salary1 = parseInt(person1[sortedName].replace(/[^0-9]/g, ''), 10);\n      const salary2 = parseInt(person2[sortedName].replace(/[^0-9]/g, ''), 10);\n\n      return salary1 - salary2;\n    }\n  });\n\n  tableBody.innerHTML = '';\n\n  for (const person of people) {\n    const row = document.createElement('tr');\n\n    row.innerHTML = `\n      <td>${person.Name}</td>\n      <td>${person.Position}</td>\n      <td>${person.Age}</td>\n      <td>${person.Salary}</td>\n    `;\n\n    tableBody.appendChild(row);\n  }\n});\n"],"names":["tableHead","document","querySelector","tableBody","addEventListener","e","columnName","target","closest","rows","people","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","push","Name","cells","textContent","Position","Age","Salary","err","return","sortedName","trim","sort","person1","person2","localeCompare","parseInt","salary1","replace","innerHTML","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","person","row1","createElement","concat","appendChild"],"version":3,"file":"index.cd5b203a.js.map"}